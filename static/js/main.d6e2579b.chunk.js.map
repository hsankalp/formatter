{"version":3,"sources":["components/ErrorAlert.jsx","components/Validator.jsx","App.js","serviceWorker.js","index.js"],"names":["ErrorAlert","isValid","error","className","role","Validator","useState","json","setJson","setIsValid","setError","id","value","spellCheck","onChange","e","target","rows","onClick","textToValidate","JSON","parse","stringify","err","toString","handleClick","disabled","hello","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","handleSaveClick","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAceA,G,MAZI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC7B,OAAOD,EACL,yBAAKE,UAAU,0BAA0BC,KAAK,SAA9C,cAIA,yBAAKD,UAAU,yBAAyBC,KAAK,SAA7C,iBACiBF,KCkFNG,EAvFG,WAAO,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEQF,mBAAS,IAFjB,mBAEfL,EAFe,KAENQ,EAFM,OAGIH,mBAAS,IAHb,mBAGfJ,EAHe,KAGRQ,EAHQ,KA4CtB,OACE,oCACE,wBAAIP,UAAU,OAAd,oBAEA,8BACEQ,GAAG,OACHC,MAAOL,EACPM,WAAW,QACXC,SA/Ce,SAAAC,GACnBP,EAAQO,EAAEC,OAAOJ,QA+CbT,UAAU,8BACVc,KAAK,MAGP,4BACEC,QAAS,kBAjDK,SAAAC,GAClB,IACE,IAAMZ,EAAOa,KAAKC,MAAMF,GACxBX,EAAQY,KAAKE,UAAUf,EAAM,KAAM,IACnCE,GAAW,GACX,MAAOc,GACPd,GAAW,GACXC,EAASa,EAAIC,aA0CIC,CAAYlB,IAC3BJ,UAAU,0BACVuB,UAAWnB,GAHb,eAQA,4BAAQW,QA7Cc,WAIxBV,EAAQY,KAAKE,UAHA,CACXK,MAAO,SAEoB,KAAM,IACnClB,GAAW,IAwC2BN,UAAU,2BAA9C,eAICI,GAAQN,GACP,4BACEiB,QAAS,kBAtCO,SAAAX,GACtB,IAAMqB,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACzB,GAAO,CAC5B0B,KAAM,qBAERL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAW,cACnBR,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,QA8BaC,CAAgBlC,IAC/BJ,UAAU,2BAFZ,aAQF,4BAAQe,QAlDa,WACvBV,EAAQ,IACRC,EAAW,KAgD0BN,UAAU,6BAA7C,SAIa,KAAZF,GAAkB,kBAAC,EAAD,CAAYA,QAASA,EAASC,MAAOA,M,MC1E/CwC,MARf,WACE,OACE,yBAAKvC,UAAU,aACb,kBAAC,EAAD,QCKcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d6e2579b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ErrorAlert = ({ isValid, error }) => {\r\n  return isValid ? (\r\n    <div className=\"alert alert-success m-3\" role=\"alert\">\r\n      Valid JSON\r\n    </div>\r\n  ) : (\r\n    <div className=\"alert alert-danger m-3\" role=\"alert\">\r\n      Invalid JSON: {error}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorAlert;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Validator.css\";\r\nimport ErrorAlert from \"./ErrorAlert\";\r\n\r\nconst Validator = () => {\r\n  const [json, setJson] = useState(\"\");\r\n  const [isValid, setIsValid] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleChange = e => {\r\n    setJson(e.target.value);\r\n  };\r\n\r\n  const handleClick = textToValidate => {\r\n    try {\r\n      const json = JSON.parse(textToValidate);\r\n      setJson(JSON.stringify(json, null, 4));\r\n      setIsValid(true);\r\n    } catch (err) {\r\n      setIsValid(false);\r\n      setError(err.toString());\r\n    }\r\n  };\r\n\r\n  const handleSampleClick = () => {\r\n    const json = {\r\n      hello: \"world\"\r\n    };\r\n    setJson(JSON.stringify(json, null, 4));\r\n    setIsValid(true);\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setJson(\"\");\r\n    setIsValid(\"\");\r\n  };\r\n\r\n  const handleSaveClick = json => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([json], {\r\n      type: \"application/json\"\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myJSON.json\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"m-4\">JSON Validator: </h3>\r\n\r\n      <textarea\r\n        id=\"json\"\r\n        value={json}\r\n        spellCheck=\"false\"\r\n        onChange={handleChange}\r\n        className=\"form-control mt-2 mb-2 mr-3\"\r\n        rows=\"2\"\r\n      ></textarea>\r\n\r\n      <button\r\n        onClick={() => handleClick(json)}\r\n        className=\"btn btn-lg btn-dark m-2\"\r\n        disabled={!json}\r\n      >\r\n        Format JSON\r\n      </button>\r\n\r\n      <button onClick={handleSampleClick} className=\"btn btn-lg btn-dark m-2\">\r\n        Sample JSON\r\n      </button>\r\n\r\n      {json && isValid && (\r\n        <button\r\n          onClick={() => handleSaveClick(json)}\r\n          className=\"btn btn-lg btn-dark m-2\"\r\n        >\r\n          Save JSON\r\n        </button>\r\n      )}\r\n\r\n      <button onClick={handleClearClick} className=\"btn btn-lg btn-danger m-2\">\r\n        Clear\r\n      </button>\r\n\r\n      {isValid !== \"\" && <ErrorAlert isValid={isValid} error={error} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Validator;\r\n","import React from \"react\";\nimport Validator from \"./components/Validator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Validator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}